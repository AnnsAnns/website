<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tomGER's Blog</title><link>https://tomger.eu/</link><description>Recent content on tomGER's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 31 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://tomger.eu/index.xml" rel="self" type="application/rss+xml"/><item><title>Farmulty - Progress Report #1</title><link>https://tomger.eu/posts/farmulty-progress-report-one/</link><pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate><guid>https://tomger.eu/posts/farmulty-progress-report-one/</guid><description>Farmulty is my attempt at a farming game with some special twists that I have been working on daily for over a month now. Midway through May I posted the first alpha of it on my twitter and the response to it was much bigger than I expected. However, I quickly realized that the way I originally planned to release snapshots of the game made it nearly impossible to commit to larger changes for the project.</description></item><item><title>Using Rust for Game Servers (+ Godot)</title><link>https://tomger.eu/posts/rust-game-lobby-system/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><guid>https://tomger.eu/posts/rust-game-lobby-system/</guid><description>I really enjoy creating games but when it comes to games, there is always one daunting task that game devs are scared off, online multiplayer. As soon as anything touches the web, it suddenly becomes a technical challenge to implement properly, esp. lobbies are among the worst contenders given that you somehow gotta exchange data between all clients.
The enormous upside however, is that multiplayer games are the games I tend to come back to much oftener than singleplayer games.</description></item><item><title>How to cross-compile Rust from WSL Linux to Windows</title><link>https://tomger.eu/posts/cross-compile-rust-wsl/</link><pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate><guid>https://tomger.eu/posts/cross-compile-rust-wsl/</guid><description>Okay, look, I have fallen down the rabbit hole when it comes to Rust. At first I didn&amp;rsquo;t expect to use the language to a great extend but the more I use it, the more I like it. Besides the great compiler and all the other benefits Rust comes with, the tooling is also amazing. There are so many useful community and first-party tools for many boilerplate problems that keep you from working efficiently, from easy wasm support to embedded software.</description></item><item><title>Rust, Risc-V and embedded systems</title><link>https://tomger.eu/posts/rust-microcontrollers/</link><pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate><guid>https://tomger.eu/posts/rust-microcontrollers/</guid><description>Guess what, I still exist. In the typical developer fashion I wrote a single blog post and then abandoned the whole site for nearly a year. In that time I mostly mastered Golang and did a lot of other things that I really want to talk about sooner or later. For now I&amp;rsquo;m going to try to write about my journey with microcontrollers in smaller more common blog posts instead.</description></item><item><title>Coming from Python to Go</title><link>https://tomger.eu/posts/golang-adventure/</link><pubDate>Mon, 15 Jun 2020 00:00:00 +0000</pubDate><guid>https://tomger.eu/posts/golang-adventure/</guid><description>In this little mini-series of blog posts I&amp;rsquo;m going to showcase the problems I faced learning Go and the cool tricks and tips I accumulated while trying to solve them. In this first blog post, I&amp;rsquo;m going to give a small introduction into the world of Go from a Python developers perspective, which means that some general knowledge about Python programming is required here.
The next blog posts are going to be purely focused on problems inside of Go and are thus for people that are already familiar with Go.</description></item></channel></rss>